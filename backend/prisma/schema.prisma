generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      Role
  studentId Int?     @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student? @relation(fields: [studentId], references: [id])
}

model Student {
  id              Int         @id @default(autoincrement())
  name            String
  email           String      @unique
  phone           String
  gender          Gender
  designation     String? // New field for designation
  guardianName    String? // New field for guardian name
  mobile          String? // New field for mobile number
  ticketNumber    String? // New field for ticket number
  division        String? // Now optional
  course          String? // Now optional
  fromDate        DateTime? // Now optional
  toDate          DateTime? // Now optional
  bedsheetCount   Int         @default(0)
  pillowCount     Int         @default(0)
  blanketCount    Int         @default(0)
  linenIssuedDate DateTime?
  roomId          Int?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  complaints      Complaint[]
  leaves          Leave[]
  room            Room?       @relation(fields: [roomId], references: [id])
  user            User?
}

model ArchivedStudent {
  id                Int       @id @default(autoincrement())
  originalId        Int // Original student ID
  name              String
  email             String
  phone             String
  gender            Gender
  designation       String?
  guardianName      String?
  mobile            String?
  ticketNumber      String?
  division          String?
  course            String?
  fromDate          DateTime?
  toDate            DateTime?
  bedsheetCount     Int       @default(0)
  pillowCount       Int       @default(0)
  blanketCount      Int       @default(0)
  linenIssuedDate   DateTime?
  roomNumber        String? // Store room number as string since room relation will be lost
  deletedAt         DateTime  @default(now())
  deletedBy         String? // Email of admin who deleted the student
  originalCreatedAt DateTime // Original student creation date
  originalUpdatedAt DateTime // Original student last update date
}

model Room {
  id          Int        @id @default(autoincrement())
  roomNumber  String     @unique
  block       String // Example: "A-Wing"
  floor       Int // 0 = Ground, 1 = First
  designation String? // e.g., "APO", "Store", "SETHI"
  capacity    Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  students    Student[]
  status      RoomStatus @default(AVAILABLE)
}

model Leave {
  id        Int         @id @default(autoincrement())
  studentId Int
  fromDate  DateTime
  toDate    DateTime
  reason    String
  status    LeaveStatus @default(PENDING)
  createdAt DateTime    @default(now())
  student   Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Complaint {
  id          Int             @id @default(autoincrement())
  studentId   Int
  subject     String
  description String
  status      ComplaintStatus @default(PENDING)
  createdAt   DateTime        @default(now())
  student     Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  STUDENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ComplaintStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  BLOCKED // for bathrooms/stores/offices
}

enum LinenStatus {
  BEDSHEET
  PILLOW_COVER
  Y
  NA
}

model LinenInventory {
  id             Int      @id @default(autoincrement())
  bedsheet       Int      @default(0) // Total inventory
  bedsheetActive Int      @default(0) // Currently in use
  bedsheetInHand Int      @default(0) // Available for distribution
  bedsheetUsed   Int      @default(0) // Used/returned items
  pillowCover    Int      @default(0) // Total inventory
  pillowActive   Int      @default(0) // Currently in use
  pillowInHand   Int      @default(0) // Available for distribution
  pillowUsed     Int      @default(0) // Used/returned items
  blanket        Int      @default(0) // Total inventory
  blanketActive  Int      @default(0) // Currently in use
  blanketInHand  Int      @default(0) // Available for distribution
  blanketUsed    Int      @default(0) // Used/returned items
  updatedAt      DateTime @updatedAt
}
