generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      Role
  studentId Int?     @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student? @relation(fields: [studentId], references: [id])
}

model Student {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique
  phone       String
  branch      String
  year        Int
  rollNumber  String       @unique
  gender      Gender
  division    String? // Now optional
  course      String? // Now optional
  fromDate    DateTime? // Now optional
  toDate      DateTime? // Now optional
  linenIssued LinenStatus? // Now optional
  roomId      Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  complaints  Complaint[]
  payments    FeePayment[]
  leaves      Leave[]
  room        Room?        @relation(fields: [roomId], references: [id])
  user        User?
}

model Room {
  id          Int        @id @default(autoincrement())
  roomNumber  String     @unique
  block       String // Example: "A-Wing"
  floor       Int // 0 = Ground, 1 = First
  designation String? // e.g., "APO", "Store", "SETHI"
  capacity    Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  students    Student[]
  status      RoomStatus @default(AVAILABLE)
}

model Leave {
  id        Int         @id @default(autoincrement())
  studentId Int
  fromDate  DateTime
  toDate    DateTime
  reason    String
  status    LeaveStatus @default(PENDING)
  createdAt DateTime    @default(now())
  student   Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Complaint {
  id          Int             @id @default(autoincrement())
  studentId   Int
  subject     String
  description String
  status      ComplaintStatus @default(PENDING)
  createdAt   DateTime        @default(now())
  student     Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model FeePayment {
  id        Int           @id @default(autoincrement())
  studentId Int
  amount    Int
  status    PaymentStatus @default(PENDING)
  paidAt    DateTime?
  dueDate   DateTime
  createdAt DateTime      @default(now())
  student   Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  STUDENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ComplaintStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  BLOCKED // for bathrooms/stores/offices
}

enum LinenStatus {
  Y
  NA
}
